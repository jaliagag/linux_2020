# CompTIA Linux+

<https://dxc.skillport.com/skillportfe/main.action?path=browsecatalog/en-us/_fcpaths_L1NraWxsU29mdFNQOC9JVFNraWxsczEvT3Blcm5nU3lzcnZlcnMvTGludXgx_fcpathe_>

## Introduction to Linux & the Command Line

- Free software: You can view, modify, copy and distribute software. Social movement, focus on User rights
- Open Source: View modify distribute copy - development methodologoy, focus on collaboration; sharing soure code to receive feedback - you can't distribute it freely? as long as you don't make money

Linux is a kernel - software that allows software to talk to hardware. The kernel runs on top of the Hardware.

GNU: Focus on _free_. The entire software is free.

People take GNU software + linux kernel -- > linux distribution. 

### Shell prompt

- $ regular user
- # root

Shell --> bash, zsh, dash

| command | option | args |
| ------- | ------ |---- |
| ls | -la | /bin/sh |

View available shells: `cat /etc/shells`

Super User: make modifications to the system - or to make changes in behalf of the another user.

If there's [] --> optional; if there is no [], that's mandatory.

Using a hyphen when logging in, we are _creating a session_ for that user. You are _fully_ that user; if you don't use the hyphen, you are modifying your session, instead of creating a _new_ session.

Edit hostfiles, edit DNS records --> `/etc/hosts`

su - : create a new session as root.

Who can do sudo? `/etc/sudoers` --> to modify it - use "visudo" instead of sudo. If we see a **%** that means it's a _group_. Check what group you belong to: groups <username>.

| user | which workstattion| = | (which commands) | authenticate? |
| ---- |------ |----- |------ |--------|
| <username/groupname>| ALL| =| (ALL) | ALL|

jdoe    ALL=(ALL)   ALL
jdoe    ALL=(ALL)   NOPASSWD:ALL
%users  ALL=/sbin/mount /mnt/cdrom, /sbin/umont /mnt/cdrom

People on the users group can run mount and umount command cdrom.

Check my group `groups <username>`

- which --> where is that command located

## Managing Users & Groups

- useradd --> add a user. need to be SU. sudo adduser sarah
  - -c --> comment (fullname of the user)
  - -e --> experition date
  - -s --> change shell (/bin/dash)
  - -d --> home folder (/home/jane_smith); needs to be created manually
- sudo id sarah
- sudo userdel <username>: delete user
  - -r removes home directory and files associated
- usermod: modify
  - -c add a comment
  - -l modify the name of the accoumt - sudo usermod -l sjones sarah; the new name for the account is sjones
- passwd <username> : add a password to an account.
- chage --> change user password expiry information
  - chage -l <username>: information about the password

### Default settings when creating an account

useradd -D : see defaults. /etc/skel --> when a new user is created, it takes information from that folder and puts it into the home directory. Modifications only affect new users, not existing users.

`/etc/login.defs` --> login definitions - we got mail box? password age, create home direcotry?+|}

useradd command --> /etc/default check config in there.

/sbin/**nologin** -> have access but not shell

chsh --> change shell

<username>:`X` the x is for the password; we can look at passwords if we look into sudo tail /etc/shadow

In the /etc/shadow we see username + a hash; if they don't have hash, it's because they don't have passwords

| username | hash | date created | starting time | expiration date | warning ahead |
| ------ | ----- |-------- | -------- |--------- |----------|
| zach | 単lakfdjlk単adjf単klajd単fkjasdfk | 17960| 0 | 99999 | 7 |

tail /etc/group --> every time we create a user, we create a group with the same name.

### Groups

Create groups

- sudo groupadd <name>
- sudo groupmod
  - -n change the name (sudo groupmod -n Marketing marketing)
- cat /etc/group
- groupdel

Users have primary group and secondary groups. When we create a user, we create the primary group for that user

- sudo gpasswd -a jdoe Sales : adding a user to Sales
- sudo gpasswd -d jdoe Sales : delete user from Sales
- sudo gpasswd -A jdoe Sales : add jdoe as admin **-A**

When we define a file, we define a User, a group and an other. A user will have certain access to a file, a group, which will usually be a person's primary group may have access to a file and other is anything else.

Establish primary group:

- newgrp Marketing --> do things within another group.
- chgrp

id <username> --> see information on the user

groups --> see the groups you belong to

tail /etc/group

gentent --> find information inside /etc/group and /etc/passwd files.

## File Access & Permissions

|type of object |owner permissions | group permissions | other permissions | 
| ----- | ------- |-------| ----- |
| d or - | rwx | r - x | r - x |

`chmod`

- u user
- g group
- o others

- 4 Read
- 2 Write
- 1 Execute

- `chmod g+w <filename>` add write permission to group
- `chmod o-r <filename>` remove read permissions to other
- `chmod u+x,g+rwx,o-r <filename>` user execute, group read, write and execute, others can't read
- `chmod u=rw,g=rw,o-rwx <filename>` = equals overwrites permissions
- `chmod 660 <filename>` read write for u and g - nothing for o

Default permissions - the uMask. There are permissions that are set at the system level, where the user is not involved (temporary files), others created by users. `.bashrc`, or `/etc/profile`. umask numeric values is backgrads

- 0 read, write and execute
- 1 read and wirte
- 2 read and esecute
- 3 read only
- 4 write and execute
- 5 write only
- 6 execute only
- 7 no permissions

A directory needs the execute permission to be set up so that you can cd into it.

`chown` changes owner and group.

- `chown jdoe:Marketing <fileName>` changes owner to jdoe : marketing group
- `chown :Sales <filename>` change only the group, leave the owner
- `sudo chown -R jaliaga /home/jaliaga/*` make sure you own everything in the home directory; -R recursive

Using .tar as a backup tool saves file permissions.

File system ACL (access control lists) > part of the FS. When the disk is mounted, that's when it determines whether or not it's going to allow these file system ACLs. When the system boots, it looks for a particular file > **/etc/fstab** which contains information on all my disks and were they are mounted on. To enable FACLs, if they are not enabled by default, you can go the fstab file and add, **,ACL**:

-UUID=<numbers> /    xfs     defaults,ACL    0 0

Then you have to unmount and mount the disc; if it's your root partition > reboot.

- getfacl to view the ACL of a file - `getfacl fileName` if nothing is returned, no facl enabled.
- `setfacl`
  - -m > modifiying `setfacl -m u:zach:rw fileName` > adds zach as user and he can read and write; `setfacl -m g:Markeing:rw fileName` adds a group
  - -s > setting

setfacl makes it easier to grant different people access to files (it used to be that only one group and one user could have access, and the rest of categories felt to the other part of the permissions); setfacl allows us to set more granular permissions.

We can also set permissions for directories.

We can see that facl are enabled if we see a **+** sign on a file. ACLs allow for more granular permission settings for FileSystems - The acl package is a dependency of **systemd**.

Sticky bit: sometimes, other than rwx-+, we might see a _t_. It is designed for shared folders. Only the _creator_ (or root) can _delete_ the file. The sticky bit keeps track of _who_ creates what.

- chmod o+t,g+t filename

## Disk Partitions & File Systems

Older styled disks: MBR, master boot record. it tells the system all the data spread accross the drive. BIOS loads up and looks for the MBR to find the OS to boot.

You are limited to 4 partitions. Home directory in one partition; system on another; swap on another. If we run out of m

## Logical Volumes & Filesystem Hierarchy

## Using vi/vim to Edit Files

## Locating & Manipulating Files

## Searching & Manipulating File Contents

## Boot Process & Kernel

## Graphical User Interfaces
